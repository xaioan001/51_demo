C51 COMPILER V9.60.0.0   CONFIG                                                            09/19/2025 20:04:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CONFIG
OBJECT MODULE PLACED IN .\Objects\config.obj
COMPILER INVOKED BY: D:\work\KEIL\ARM\C51\BIN\C51.EXE APP\config.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\APP;.\STC8HLi
                    -b;.\DRIVER) DEBUG OBJECTEXTEND PRINT(.\Listings\config.lst) TABS(2) OBJECT(.\Objects\config.obj)

line level    source

   1          #include  "STC8G_H_GPIO.h"
   2          #include  "STC8G_H_NVIC.h"
   3          #include  "STC8G_H_Timer.h"
   4          #include  "STC8G_H_Switch.h"
   5          #include "STC8G_H_UART.h"
   6          #include  "config.h"
   7          void  GPIO_config(void)
   8          {
   9   1        GPIO_InitTypeDef  GPIO_InitStructure;   //½á¹¹¶¨Òå
  10   1      
  11   1        GPIO_InitStructure.Pin  = GPIO_Pin_All;
  12   1        GPIO_InitStructure.Mode = GPIO_PullUp;
  13   1        GPIO_Inilize(GPIO_P5,&GPIO_InitStructure);
  14   1        GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);
  15   1        GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);
  16   1        GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);
  17   1        GPIO_Inilize(GPIO_P4,&GPIO_InitStructure);
  18   1        GPIO_Inilize(GPIO_P6,&GPIO_InitStructure);
  19   1        GPIO_Inilize(GPIO_P7,&GPIO_InitStructure);
  20   1      //  GPIO_InitStructure.Pin  = GPIO_Pin_All;   //Ö¸¶¨Òª³õÊ¼»¯µÄIO, GPIO_Pin_0 ~ GPIO_Pin_7
  21   1      //  GPIO_InitStructure.Mode = GPIO_PullUp;    //Ö¸¶¨IOµÄÊäÈë»òÊä³ö·½Ê½,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  22   1        GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);
  23   1        
  24   1        P0_MODE_IN_HIZ(GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2);   //P1.0~P1.7 ÉèÖÃÎª¸ß×èÊäÈë
  25   1        
  26   1        P2_MODE_IN_HIZ(GPIO_Pin_6|GPIO_Pin_7);//P1.0~P1.7 ÉèÖÃÎª¸ß×èÊäÈë
  27   1        P2_MODE_OUT_PP(GPIO_Pin_4);//·äÃùÆ÷µ÷ÕûÎªÍÆÍìÊä³ö
  28   1      }
  29          
  30          void  Timer_config(void)
  31          {
  32   1        TIM_InitTypeDef   TIM_InitStructure;            //½á¹¹¶¨Òå
  33   1      
  34   1        //¶¨Ê±Æ÷0×ö16Î»×Ô¶¯ÖØ×°, ÊµÏÖ500ms¶¨Ê±£¬¶¨Ê±1ms/fre=1000,ÖÐ¶Ï500´Î
  35   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //Ö¸¶¨¹¤×÷Ä£Ê½,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  36   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;   //Ö¸¶¨Ê±ÖÓÔ´,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_E
             -xt
  37   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //ÊÇ·ñÊä³ö¸ßËÙÂö³å, ENABLE»òDISABLE
  38   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 1000UL);   //³õÖµ,
  39   1        TIM_InitStructure.TIM_Run       = ENABLE;       //ÊÇ·ñ³õÊ¼»¯ºóÆô¶¯¶¨Ê±Æ÷, ENABLE»òDISABLE
  40   1        Timer_Inilize(Timer0,&TIM_InitStructure);       //³õÊ¼»¯Timer0    Timer0,Timer1,Timer2,Timer3,Timer4
  41   1        NVIC_Timer0_Init(ENABLE,Priority_0);    //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  42   1      
  43   1        //¶¨Ê±Æ÷1×ö16Î»×Ô¶¯ÖØ×°, ÖÐ¶ÏÆµÂÊÎª10000HZ£¬ÖÐ¶Ïº¯Êý´ÓP6.6È¡·´Êä³ö5KHZ·½²¨ÐÅºÅ.
  44   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //Ö¸¶¨¹¤×÷Ä£Ê½,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_T1Stop
  45   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;   //Ö¸¶¨Ê±ÖÓÔ´, TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext
  46   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //ÊÇ·ñÊä³ö¸ßËÙÂö³å, ENABLE»òDISABLE
  47   1        TIM_InitStructure.TIM_Value     =65536UL - (MAIN_Fosc / 1000UL);// 65536UL - (MAIN_Fosc / 10000);     //³õÖ
             -µ,
  48   1        TIM_InitStructure.TIM_Run       = ENABLE;       //ÊÇ·ñ³õÊ¼»¯ºóÆô¶¯¶¨Ê±Æ÷, ENABLE»òDISABLE
C51 COMPILER V9.60.0.0   CONFIG                                                            09/19/2025 20:04:49 PAGE 2   

  49   1        Timer_Inilize(Timer1,&TIM_InitStructure);       //³õÊ¼»¯Timer1    Timer0,Timer1,Timer2,Timer3,Timer4
  50   1        NVIC_Timer1_Init(ENABLE,Priority_0);    //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  51   1      
  52   1      
  53   1      }
  54          
  55          void  UART_config(void)
  56          {
  57   1        COMx_InitDefine   COMx_InitStructure;         //½á¹¹¶¨Òå
  58   1      
  59   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //Ä£Ê½, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART
             -_9bit_BRTx
  60   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //Ñ¡Ôñ²¨ÌØÂÊ·¢ÉúÆ÷, BRT_Timer1, BRT_Timer2 (×¢Òâ: ´®¿Ú2
             -¹Ì¶¨Ê¹ÓÃBRT_Timer2)
  61   1        COMx_InitStructure.UART_BaudRate  = 9600ul;     //²¨ÌØÂÊ, Ò»°ã 110 ~ 115200
  62   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //½ÓÊÕÔÊÐí,   ENABLE»òDISABLE
  63   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //²¨ÌØÂÊ¼Ó±¶, ENABLE»òDISABLE
  64   1        UART_Configuration(UART1, &COMx_InitStructure);   //³õÊ¼»¯´®¿Ú1 UART1,UART2,UART3,UART4
  65   1        NVIC_UART1_Init(ENABLE,Priority_1);   //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
  66   1      
  67   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //Ä£Ê½,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  68   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //Ñ¡Ôñ²¨ÌØÂÊ·¢ÉúÆ÷,   BRT_Timer2, BRT_Timer4 (×¢Òâ: ´®¿
             -Ú2¹Ì¶¨Ê¹ÓÃBRT_Timer2)
  69   1        COMx_InitStructure.UART_BaudRate  = 9600ul;     //²¨ÌØÂÊ,     110 ~ 115200
  70   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //½ÓÊÕÔÊÐí,   ENABLE»òDISABLE
  71   1        UART_Configuration(UART4, &COMx_InitStructure);   //³õÊ¼»¯´®¿Ú2 UART1,UART2,UART3,UART4
  72   1        NVIC_UART4_Init(ENABLE,Priority_1);   //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
  73   1      
  74   1      
  75   1        UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  76   1        UART4_SW(UART4_SW_P52_P53);   //UART2_SW_P10_P11,UART2_SW_P46_P47
  77   1      }
  78          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    299    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
